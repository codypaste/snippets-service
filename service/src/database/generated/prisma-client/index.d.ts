// Code generated by Prisma (prisma@1.31.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  group: (where?: GroupWhereInput) => Promise<boolean>;
  snippet: (where?: SnippetWhereInput) => Promise<boolean>;
  snippetChunk: (where?: SnippetChunkWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  group: (where: GroupWhereUniqueInput) => GroupPromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  snippet: (where: SnippetWhereUniqueInput) => SnippetPromise;
  snippets: (args?: {
    where?: SnippetWhereInput;
    orderBy?: SnippetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Snippet>;
  snippetsConnection: (args?: {
    where?: SnippetWhereInput;
    orderBy?: SnippetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SnippetConnectionPromise;
  snippetChunk: (where: SnippetChunkWhereUniqueInput) => SnippetChunkPromise;
  snippetChunks: (args?: {
    where?: SnippetChunkWhereInput;
    orderBy?: SnippetChunkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SnippetChunk>;
  snippetChunksConnection: (args?: {
    where?: SnippetChunkWhereInput;
    orderBy?: SnippetChunkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SnippetChunkConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createSnippet: (data: SnippetCreateInput) => SnippetPromise;
  updateSnippet: (args: {
    data: SnippetUpdateInput;
    where: SnippetWhereUniqueInput;
  }) => SnippetPromise;
  updateManySnippets: (args: {
    data: SnippetUpdateManyMutationInput;
    where?: SnippetWhereInput;
  }) => BatchPayloadPromise;
  upsertSnippet: (args: {
    where: SnippetWhereUniqueInput;
    create: SnippetCreateInput;
    update: SnippetUpdateInput;
  }) => SnippetPromise;
  deleteSnippet: (where: SnippetWhereUniqueInput) => SnippetPromise;
  deleteManySnippets: (where?: SnippetWhereInput) => BatchPayloadPromise;
  createSnippetChunk: (data: SnippetChunkCreateInput) => SnippetChunkPromise;
  updateSnippetChunk: (args: {
    data: SnippetChunkUpdateInput;
    where: SnippetChunkWhereUniqueInput;
  }) => SnippetChunkPromise;
  updateManySnippetChunks: (args: {
    data: SnippetChunkUpdateManyMutationInput;
    where?: SnippetChunkWhereInput;
  }) => BatchPayloadPromise;
  upsertSnippetChunk: (args: {
    where: SnippetChunkWhereUniqueInput;
    create: SnippetChunkCreateInput;
    update: SnippetChunkUpdateInput;
  }) => SnippetChunkPromise;
  deleteSnippetChunk: (
    where: SnippetChunkWhereUniqueInput
  ) => SnippetChunkPromise;
  deleteManySnippetChunks: (
    where?: SnippetChunkWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  snippet: (
    where?: SnippetSubscriptionWhereInput
  ) => SnippetSubscriptionPayloadSubscription;
  snippetChunk: (
    where?: SnippetChunkSubscriptionWhereInput
  ) => SnippetChunkSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SnippetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "author_ASC"
  | "author_DESC"
  | "snippetName_ASC"
  | "snippetName_DESC"
  | "syntax_ASC"
  | "syntax_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SnippetChunkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "author_ASC"
  | "author_DESC"
  | "isPublic_ASC"
  | "isPublic_DESC"
  | "isEncrypted_ASC"
  | "isEncrypted_DESC"
  | "password_ASC"
  | "password_DESC"
  | "isProtected_ASC"
  | "isProtected_DESC"
  | "expirationDatetime_ASC"
  | "expirationDatetime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface SnippetChunkUpdateWithWhereUniqueWithoutSnippetInput {
  where: SnippetChunkWhereUniqueInput;
  data: SnippetChunkUpdateWithoutSnippetDataInput;
}

export type GroupWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SnippetChunkScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: SnippetChunkScalarWhereInput[] | SnippetChunkScalarWhereInput;
  OR?: SnippetChunkScalarWhereInput[] | SnippetChunkScalarWhereInput;
  NOT?: SnippetChunkScalarWhereInput[] | SnippetChunkScalarWhereInput;
}

export interface SnippetWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  author?: String;
  author_not?: String;
  author_in?: String[] | String;
  author_not_in?: String[] | String;
  author_lt?: String;
  author_lte?: String;
  author_gt?: String;
  author_gte?: String;
  author_contains?: String;
  author_not_contains?: String;
  author_starts_with?: String;
  author_not_starts_with?: String;
  author_ends_with?: String;
  author_not_ends_with?: String;
  snippetName?: String;
  snippetName_not?: String;
  snippetName_in?: String[] | String;
  snippetName_not_in?: String[] | String;
  snippetName_lt?: String;
  snippetName_lte?: String;
  snippetName_gt?: String;
  snippetName_gte?: String;
  snippetName_contains?: String;
  snippetName_not_contains?: String;
  snippetName_starts_with?: String;
  snippetName_not_starts_with?: String;
  snippetName_ends_with?: String;
  snippetName_not_ends_with?: String;
  syntax?: String;
  syntax_not?: String;
  syntax_in?: String[] | String;
  syntax_not_in?: String[] | String;
  syntax_lt?: String;
  syntax_lte?: String;
  syntax_gt?: String;
  syntax_gte?: String;
  syntax_contains?: String;
  syntax_not_contains?: String;
  syntax_starts_with?: String;
  syntax_not_starts_with?: String;
  syntax_ends_with?: String;
  syntax_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  chunks_every?: SnippetChunkWhereInput;
  chunks_some?: SnippetChunkWhereInput;
  chunks_none?: SnippetChunkWhereInput;
  group?: GroupWhereInput;
  AND?: SnippetWhereInput[] | SnippetWhereInput;
  OR?: SnippetWhereInput[] | SnippetWhereInput;
  NOT?: SnippetWhereInput[] | SnippetWhereInput;
}

export interface SnippetChunkUpdateManyWithWhereNestedInput {
  where: SnippetChunkScalarWhereInput;
  data: SnippetChunkUpdateManyDataInput;
}

export interface GroupWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  author?: String;
  author_not?: String;
  author_in?: String[] | String;
  author_not_in?: String[] | String;
  author_lt?: String;
  author_lte?: String;
  author_gt?: String;
  author_gte?: String;
  author_contains?: String;
  author_not_contains?: String;
  author_starts_with?: String;
  author_not_starts_with?: String;
  author_ends_with?: String;
  author_not_ends_with?: String;
  isPublic?: Boolean;
  isPublic_not?: Boolean;
  isEncrypted?: Boolean;
  isEncrypted_not?: Boolean;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  isProtected?: Boolean;
  isProtected_not?: Boolean;
  expirationDatetime?: DateTimeInput;
  expirationDatetime_not?: DateTimeInput;
  expirationDatetime_in?: DateTimeInput[] | DateTimeInput;
  expirationDatetime_not_in?: DateTimeInput[] | DateTimeInput;
  expirationDatetime_lt?: DateTimeInput;
  expirationDatetime_lte?: DateTimeInput;
  expirationDatetime_gt?: DateTimeInput;
  expirationDatetime_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  snippets_every?: SnippetWhereInput;
  snippets_some?: SnippetWhereInput;
  snippets_none?: SnippetWhereInput;
  AND?: GroupWhereInput[] | GroupWhereInput;
  OR?: GroupWhereInput[] | GroupWhereInput;
  NOT?: GroupWhereInput[] | GroupWhereInput;
}

export interface SnippetChunkCreateManyWithoutSnippetInput {
  create?:
    | SnippetChunkCreateWithoutSnippetInput[]
    | SnippetChunkCreateWithoutSnippetInput;
  connect?: SnippetChunkWhereUniqueInput[] | SnippetChunkWhereUniqueInput;
}

export interface SnippetCreateInput {
  author?: String;
  snippetName: String;
  syntax?: String;
  chunks?: SnippetChunkCreateManyWithoutSnippetInput;
  group: GroupCreateOneWithoutSnippetsInput;
}

export interface SnippetChunkCreateWithoutSnippetInput {
  value: String;
}

export interface SnippetChunkUpdateManyDataInput {
  value?: String;
}

export interface GroupUpdateInput {
  title?: String;
  description?: String;
  author?: String;
  isPublic?: Boolean;
  isEncrypted?: Boolean;
  password?: String;
  isProtected?: Boolean;
  expirationDatetime?: DateTimeInput;
  snippets?: SnippetUpdateManyWithoutGroupInput;
}

export interface SnippetSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SnippetWhereInput;
  AND?: SnippetSubscriptionWhereInput[] | SnippetSubscriptionWhereInput;
  OR?: SnippetSubscriptionWhereInput[] | SnippetSubscriptionWhereInput;
  NOT?: SnippetSubscriptionWhereInput[] | SnippetSubscriptionWhereInput;
}

export interface SnippetUpdateManyWithoutGroupInput {
  create?: SnippetCreateWithoutGroupInput[] | SnippetCreateWithoutGroupInput;
  delete?: SnippetWhereUniqueInput[] | SnippetWhereUniqueInput;
  connect?: SnippetWhereUniqueInput[] | SnippetWhereUniqueInput;
  set?: SnippetWhereUniqueInput[] | SnippetWhereUniqueInput;
  disconnect?: SnippetWhereUniqueInput[] | SnippetWhereUniqueInput;
  update?:
    | SnippetUpdateWithWhereUniqueWithoutGroupInput[]
    | SnippetUpdateWithWhereUniqueWithoutGroupInput;
  upsert?:
    | SnippetUpsertWithWhereUniqueWithoutGroupInput[]
    | SnippetUpsertWithWhereUniqueWithoutGroupInput;
  deleteMany?: SnippetScalarWhereInput[] | SnippetScalarWhereInput;
  updateMany?:
    | SnippetUpdateManyWithWhereNestedInput[]
    | SnippetUpdateManyWithWhereNestedInput;
}

export interface SnippetChunkUpdateManyMutationInput {
  value?: String;
}

export interface SnippetUpdateWithWhereUniqueWithoutGroupInput {
  where: SnippetWhereUniqueInput;
  data: SnippetUpdateWithoutGroupDataInput;
}

export interface SnippetUpdateWithoutChunksDataInput {
  author?: String;
  snippetName?: String;
  syntax?: String;
  group?: GroupUpdateOneRequiredWithoutSnippetsInput;
}

export interface SnippetUpdateWithoutGroupDataInput {
  author?: String;
  snippetName?: String;
  syntax?: String;
  chunks?: SnippetChunkUpdateManyWithoutSnippetInput;
}

export type SnippetWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SnippetChunkUpdateManyWithoutSnippetInput {
  create?:
    | SnippetChunkCreateWithoutSnippetInput[]
    | SnippetChunkCreateWithoutSnippetInput;
  delete?: SnippetChunkWhereUniqueInput[] | SnippetChunkWhereUniqueInput;
  connect?: SnippetChunkWhereUniqueInput[] | SnippetChunkWhereUniqueInput;
  set?: SnippetChunkWhereUniqueInput[] | SnippetChunkWhereUniqueInput;
  disconnect?: SnippetChunkWhereUniqueInput[] | SnippetChunkWhereUniqueInput;
  update?:
    | SnippetChunkUpdateWithWhereUniqueWithoutSnippetInput[]
    | SnippetChunkUpdateWithWhereUniqueWithoutSnippetInput;
  upsert?:
    | SnippetChunkUpsertWithWhereUniqueWithoutSnippetInput[]
    | SnippetChunkUpsertWithWhereUniqueWithoutSnippetInput;
  deleteMany?: SnippetChunkScalarWhereInput[] | SnippetChunkScalarWhereInput;
  updateMany?:
    | SnippetChunkUpdateManyWithWhereNestedInput[]
    | SnippetChunkUpdateManyWithWhereNestedInput;
}

export interface SnippetCreateWithoutChunksInput {
  author?: String;
  snippetName: String;
  syntax?: String;
  group: GroupCreateOneWithoutSnippetsInput;
}

export interface GroupUpdateWithoutSnippetsDataInput {
  title?: String;
  description?: String;
  author?: String;
  isPublic?: Boolean;
  isEncrypted?: Boolean;
  password?: String;
  isProtected?: Boolean;
  expirationDatetime?: DateTimeInput;
}

export type SnippetChunkWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SnippetChunkUpdateWithoutSnippetDataInput {
  value?: String;
}

export interface SnippetUpdateManyMutationInput {
  author?: String;
  snippetName?: String;
  syntax?: String;
}

export interface SnippetChunkUpsertWithWhereUniqueWithoutSnippetInput {
  where: SnippetChunkWhereUniqueInput;
  update: SnippetChunkUpdateWithoutSnippetDataInput;
  create: SnippetChunkCreateWithoutSnippetInput;
}

export interface SnippetCreateManyWithoutGroupInput {
  create?: SnippetCreateWithoutGroupInput[] | SnippetCreateWithoutGroupInput;
  connect?: SnippetWhereUniqueInput[] | SnippetWhereUniqueInput;
}

export interface SnippetChunkWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  snippet?: SnippetWhereInput;
  AND?: SnippetChunkWhereInput[] | SnippetChunkWhereInput;
  OR?: SnippetChunkWhereInput[] | SnippetChunkWhereInput;
  NOT?: SnippetChunkWhereInput[] | SnippetChunkWhereInput;
}

export interface SnippetChunkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SnippetChunkWhereInput;
  AND?:
    | SnippetChunkSubscriptionWhereInput[]
    | SnippetChunkSubscriptionWhereInput;
  OR?:
    | SnippetChunkSubscriptionWhereInput[]
    | SnippetChunkSubscriptionWhereInput;
  NOT?:
    | SnippetChunkSubscriptionWhereInput[]
    | SnippetChunkSubscriptionWhereInput;
}

export interface GroupUpdateOneRequiredWithoutSnippetsInput {
  create?: GroupCreateWithoutSnippetsInput;
  update?: GroupUpdateWithoutSnippetsDataInput;
  upsert?: GroupUpsertWithoutSnippetsInput;
  connect?: GroupWhereUniqueInput;
}

export interface SnippetUpsertWithoutChunksInput {
  update: SnippetUpdateWithoutChunksDataInput;
  create: SnippetCreateWithoutChunksInput;
}

export interface SnippetUpdateInput {
  author?: String;
  snippetName?: String;
  syntax?: String;
  chunks?: SnippetChunkUpdateManyWithoutSnippetInput;
  group?: GroupUpdateOneRequiredWithoutSnippetsInput;
}

export interface SnippetChunkUpdateInput {
  value?: String;
  snippet?: SnippetUpdateOneRequiredWithoutChunksInput;
}

export interface SnippetUpsertWithWhereUniqueWithoutGroupInput {
  where: SnippetWhereUniqueInput;
  update: SnippetUpdateWithoutGroupDataInput;
  create: SnippetCreateWithoutGroupInput;
}

export interface SnippetChunkCreateInput {
  value: String;
  snippet: SnippetCreateOneWithoutChunksInput;
}

export interface SnippetScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  author?: String;
  author_not?: String;
  author_in?: String[] | String;
  author_not_in?: String[] | String;
  author_lt?: String;
  author_lte?: String;
  author_gt?: String;
  author_gte?: String;
  author_contains?: String;
  author_not_contains?: String;
  author_starts_with?: String;
  author_not_starts_with?: String;
  author_ends_with?: String;
  author_not_ends_with?: String;
  snippetName?: String;
  snippetName_not?: String;
  snippetName_in?: String[] | String;
  snippetName_not_in?: String[] | String;
  snippetName_lt?: String;
  snippetName_lte?: String;
  snippetName_gt?: String;
  snippetName_gte?: String;
  snippetName_contains?: String;
  snippetName_not_contains?: String;
  snippetName_starts_with?: String;
  snippetName_not_starts_with?: String;
  snippetName_ends_with?: String;
  snippetName_not_ends_with?: String;
  syntax?: String;
  syntax_not?: String;
  syntax_in?: String[] | String;
  syntax_not_in?: String[] | String;
  syntax_lt?: String;
  syntax_lte?: String;
  syntax_gt?: String;
  syntax_gte?: String;
  syntax_contains?: String;
  syntax_not_contains?: String;
  syntax_starts_with?: String;
  syntax_not_starts_with?: String;
  syntax_ends_with?: String;
  syntax_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: SnippetScalarWhereInput[] | SnippetScalarWhereInput;
  OR?: SnippetScalarWhereInput[] | SnippetScalarWhereInput;
  NOT?: SnippetScalarWhereInput[] | SnippetScalarWhereInput;
}

export interface GroupCreateInput {
  title: String;
  description?: String;
  author?: String;
  isPublic?: Boolean;
  isEncrypted?: Boolean;
  password?: String;
  isProtected?: Boolean;
  expirationDatetime?: DateTimeInput;
  snippets?: SnippetCreateManyWithoutGroupInput;
}

export interface SnippetUpdateManyWithWhereNestedInput {
  where: SnippetScalarWhereInput;
  data: SnippetUpdateManyDataInput;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GroupWhereInput;
  AND?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
  OR?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
  NOT?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
}

export interface GroupCreateOneWithoutSnippetsInput {
  create?: GroupCreateWithoutSnippetsInput;
  connect?: GroupWhereUniqueInput;
}

export interface GroupCreateWithoutSnippetsInput {
  title: String;
  description?: String;
  author?: String;
  isPublic?: Boolean;
  isEncrypted?: Boolean;
  password?: String;
  isProtected?: Boolean;
  expirationDatetime?: DateTimeInput;
}

export interface GroupUpdateManyMutationInput {
  title?: String;
  description?: String;
  author?: String;
  isPublic?: Boolean;
  isEncrypted?: Boolean;
  password?: String;
  isProtected?: Boolean;
  expirationDatetime?: DateTimeInput;
}

export interface SnippetUpdateManyDataInput {
  author?: String;
  snippetName?: String;
  syntax?: String;
}

export interface SnippetUpdateOneRequiredWithoutChunksInput {
  create?: SnippetCreateWithoutChunksInput;
  update?: SnippetUpdateWithoutChunksDataInput;
  upsert?: SnippetUpsertWithoutChunksInput;
  connect?: SnippetWhereUniqueInput;
}

export interface SnippetCreateWithoutGroupInput {
  author?: String;
  snippetName: String;
  syntax?: String;
  chunks?: SnippetChunkCreateManyWithoutSnippetInput;
}

export interface GroupUpsertWithoutSnippetsInput {
  update: GroupUpdateWithoutSnippetsDataInput;
  create: GroupCreateWithoutSnippetsInput;
}

export interface SnippetCreateOneWithoutChunksInput {
  create?: SnippetCreateWithoutChunksInput;
  connect?: SnippetWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface SnippetChunkPreviousValues {
  id: ID_Output;
  value: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SnippetChunkPreviousValuesPromise
  extends Promise<SnippetChunkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SnippetChunkPreviousValuesSubscription
  extends Promise<AsyncIterator<SnippetChunkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SnippetConnection {
  pageInfo: PageInfo;
  edges: SnippetEdge[];
}

export interface SnippetConnectionPromise
  extends Promise<SnippetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SnippetEdge>>() => T;
  aggregate: <T = AggregateSnippetPromise>() => T;
}

export interface SnippetConnectionSubscription
  extends Promise<AsyncIterator<SnippetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SnippetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSnippetSubscription>() => T;
}

export interface SnippetChunk {
  id: ID_Output;
  value: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SnippetChunkPromise
  extends Promise<SnippetChunk>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  snippet: <T = SnippetPromise>() => T;
}

export interface SnippetChunkSubscription
  extends Promise<AsyncIterator<SnippetChunk>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  snippet: <T = SnippetSubscription>() => T;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface SnippetChunkSubscriptionPayload {
  mutation: MutationType;
  node: SnippetChunk;
  updatedFields: String[];
  previousValues: SnippetChunkPreviousValues;
}

export interface SnippetChunkSubscriptionPayloadPromise
  extends Promise<SnippetChunkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SnippetChunkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SnippetChunkPreviousValuesPromise>() => T;
}

export interface SnippetChunkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SnippetChunkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SnippetChunkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SnippetChunkPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSnippetChunk {
  count: Int;
}

export interface AggregateSnippetChunkPromise
  extends Promise<AggregateSnippetChunk>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSnippetChunkSubscription
  extends Promise<AsyncIterator<AggregateSnippetChunk>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface SnippetChunkConnection {
  pageInfo: PageInfo;
  edges: SnippetChunkEdge[];
}

export interface SnippetChunkConnectionPromise
  extends Promise<SnippetChunkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SnippetChunkEdge>>() => T;
  aggregate: <T = AggregateSnippetChunkPromise>() => T;
}

export interface SnippetChunkConnectionSubscription
  extends Promise<AsyncIterator<SnippetChunkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SnippetChunkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSnippetChunkSubscription>() => T;
}

export interface SnippetEdge {
  node: Snippet;
  cursor: String;
}

export interface SnippetEdgePromise extends Promise<SnippetEdge>, Fragmentable {
  node: <T = SnippetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SnippetEdgeSubscription
  extends Promise<AsyncIterator<SnippetEdge>>,
    Fragmentable {
  node: <T = SnippetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupPreviousValues {
  id: ID_Output;
  title: String;
  description?: String;
  author?: String;
  isPublic?: Boolean;
  isEncrypted?: Boolean;
  password?: String;
  isProtected?: Boolean;
  expirationDatetime?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  author: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
  isEncrypted: () => Promise<Boolean>;
  password: () => Promise<String>;
  isProtected: () => Promise<Boolean>;
  expirationDatetime: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  isEncrypted: () => Promise<AsyncIterator<Boolean>>;
  password: () => Promise<AsyncIterator<String>>;
  isProtected: () => Promise<AsyncIterator<Boolean>>;
  expirationDatetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface Group {
  id: ID_Output;
  title: String;
  description?: String;
  author?: String;
  isPublic?: Boolean;
  isEncrypted?: Boolean;
  password?: String;
  isProtected?: Boolean;
  expirationDatetime?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  author: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
  isEncrypted: () => Promise<Boolean>;
  password: () => Promise<String>;
  isProtected: () => Promise<Boolean>;
  expirationDatetime: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  snippets: <T = FragmentableArray<Snippet>>(args?: {
    where?: SnippetWhereInput;
    orderBy?: SnippetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  isEncrypted: () => Promise<AsyncIterator<Boolean>>;
  password: () => Promise<AsyncIterator<String>>;
  isProtected: () => Promise<AsyncIterator<Boolean>>;
  expirationDatetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  snippets: <T = Promise<AsyncIterator<SnippetSubscription>>>(args?: {
    where?: SnippetWhereInput;
    orderBy?: SnippetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SnippetSubscriptionPayload {
  mutation: MutationType;
  node: Snippet;
  updatedFields: String[];
  previousValues: SnippetPreviousValues;
}

export interface SnippetSubscriptionPayloadPromise
  extends Promise<SnippetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SnippetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SnippetPreviousValuesPromise>() => T;
}

export interface SnippetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SnippetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SnippetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SnippetPreviousValuesSubscription>() => T;
}

export interface Snippet {
  id: ID_Output;
  author?: String;
  snippetName: String;
  syntax?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SnippetPromise extends Promise<Snippet>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: () => Promise<String>;
  snippetName: () => Promise<String>;
  syntax: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  chunks: <T = FragmentableArray<SnippetChunk>>(args?: {
    where?: SnippetChunkWhereInput;
    orderBy?: SnippetChunkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  group: <T = GroupPromise>() => T;
}

export interface SnippetSubscription
  extends Promise<AsyncIterator<Snippet>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: () => Promise<AsyncIterator<String>>;
  snippetName: () => Promise<AsyncIterator<String>>;
  syntax: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  chunks: <T = Promise<AsyncIterator<SnippetChunkSubscription>>>(args?: {
    where?: SnippetChunkWhereInput;
    orderBy?: SnippetChunkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  group: <T = GroupSubscription>() => T;
}

export interface AggregateSnippet {
  count: Int;
}

export interface AggregateSnippetPromise
  extends Promise<AggregateSnippet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSnippetSubscription
  extends Promise<AsyncIterator<AggregateSnippet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SnippetChunkEdge {
  node: SnippetChunk;
  cursor: String;
}

export interface SnippetChunkEdgePromise
  extends Promise<SnippetChunkEdge>,
    Fragmentable {
  node: <T = SnippetChunkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SnippetChunkEdgeSubscription
  extends Promise<AsyncIterator<SnippetChunkEdge>>,
    Fragmentable {
  node: <T = SnippetChunkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SnippetPreviousValues {
  id: ID_Output;
  author?: String;
  snippetName: String;
  syntax?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SnippetPreviousValuesPromise
  extends Promise<SnippetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  author: () => Promise<String>;
  snippetName: () => Promise<String>;
  syntax: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SnippetPreviousValuesSubscription
  extends Promise<AsyncIterator<SnippetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: () => Promise<AsyncIterator<String>>;
  snippetName: () => Promise<AsyncIterator<String>>;
  syntax: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Group",
    embedded: false
  },
  {
    name: "Snippet",
    embedded: false
  },
  {
    name: "SnippetChunk",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
